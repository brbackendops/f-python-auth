name: Python App Pipeline
on:
  workflow_dispatch: null
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
env:
  DJANGO_ENV: development
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
jobs:
  build:
    name: Build
    env:
      DB_NAME: falcondb
      DB_HOST: localhost
      DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_USERNAME: ${{ vars.POSTGRES_USERNAME }}
      DB_PORT: 5432
      REDIS__CLIENT: redis
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DB: falcondb
          POSTGRES_USER: ${{ vars.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: 
          --health-cmd="pg_isready" 
          --health-interval=10s 
          --health-timeout=5s
          --health-retries=5
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.2
      - name: install dependencies
        run: pip install -r requirements.txt
      # - name: make migrations
      #   id: make_migrations
      #   run: python manage.py makemigrations
      # - name: load into db
      #   if: success() && steps.make_migrations.outcome == 'success'
      #   run: python manage.py migrate
      - name: run & check
        run: python manage.py check
  test:
    name: Test
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
    runs-on: ubuntu-latest
    env:
      REDIS_CLIENT: redis
    needs:
      - build
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.2
      - name: install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage
      - name: make tests
        run: |
          coverage run --source='.' manage.py test apps.users.tests
      - name: create coverage report
        run: coverage report > test-report.txt
      - name: upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: test-report.txt
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    steps:
      - name: checkout sourcecode
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: set up docker buildx
        id: docker-environ
        uses: docker/setup-buildx-action@v3
      - name: Build and push docker to hub
        if: success() && steps.docker-environ.outcome == 'success'
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{secrets.DOCKER_USERNAME}}/falcon-python-app:${{ github.ref_name}}-${{github.sha }}
